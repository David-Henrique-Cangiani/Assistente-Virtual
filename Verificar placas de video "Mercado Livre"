from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.keys import Keys
import pandas as pd
import time
from concurrent.futures import ThreadPoolExecutor

# Configurações do Selenium
def setup_driver():
    options = webdriver.ChromeOptions()
    options.add_argument("--headless")  # Executa sem abrir o navegador
    options.add_argument("--no-sandbox")
    options.add_argument("--disable-dev-shm-usage")
    driver = webdriver.Chrome(options=options)
    return driver

# Função para buscar placas de vídeo no Mercado Livre
def buscar_placas(driver, busca, paginas=1):
    url = "https://www.mercadolivre.com.br/"
    driver.get(url)
    time.sleep(3)  # Esperar o site carregar

    # Localizar barra de busca e buscar termo
    search_box = driver.find_element(By.NAME, "as_word")
    search_box.send_keys(busca)
    search_box.send_keys(Keys.RETURN)
    time.sleep(3)

    resultados = []

    for pagina in range(paginas):
        print(f"Coletando dados da página {pagina + 1}...")
        produtos = driver.find_elements(By.CSS_SELECTOR, ".ui-search-result__wrapper")
        for produto in produtos:
            try:
                titulo = produto.find_element(By.CSS_SELECTOR, ".ui-search-item__title").text
                preco = produto.find_element(By.CSS_SELECTOR, ".price-tag-fraction").text
                link = produto.find_element(By.CSS_SELECTOR, ".ui-search-link").get_attribute("href")
                resultados.append({"Título": titulo, "Preço (R$)": preco, "Link": link})
            except Exception as e:
                print(f"Erro ao coletar dados: {e}")

        # Navegar para a próxima página, se existir
        try:
            next_button = driver.find_element(By.CSS_SELECTOR, ".andes-pagination__button--next a")
            next_button.click()
            time.sleep(3)
        except:
            print("Fim das páginas ou erro ao acessar próxima página.")
            break

    return resultados

# Filtrar por preço ou modelo
def filtrar_resultados(resultados, preco_min=None, preco_max=None, modelo=None):
    df = pd.DataFrame(resultados)
    df["Preço (R$)"] = pd.to_numeric(df["Preço (R$)"].str.replace(".", ""), errors="coerce")

    if preco_min:
        df = df[df["Preço (R$)"] >= preco_min]
    if preco_max:
        df = df[df["Preço (R$)"] <= preco_max]
    if modelo:
        df = df[df["Título"].str.contains(modelo, case=False, na=False)]

    return df

# Coleta avançada de detalhes (paralelismo)
def coletar_detalhes(link):
    driver = setup_driver()
    driver.get(link)
    time.sleep(2)
    try:
        descricao = driver.find_element(By.CSS_SELECTOR, ".ui-pdp-description__content").text
    except:
        descricao = "Não disponível"
    driver.quit()
    return descricao

def coletar_detalhes_multithread(resultados):
    with ThreadPoolExecutor() as executor:
        links = [r["Link"] for r in resultados]
        descricoes = list(executor.map(coletar_detalhes, links))
        for i, descricao in enumerate(descricoes):
            resultados[i]["Descrição"] = descricao
    return resultados

# Exportar dados para Excel
def exportar_para_excel(df, nome_arquivo="resultados.xlsx"):
    df.to_excel(nome_arquivo, index=False)
    print(f"Dados salvos em {nome_arquivo}")

# Programa principal
if __name__ == "__main__":
    termo_busca = input("Digite o termo de busca para placas de vídeo: ")
    paginas = int(input("Quantas páginas deseja coletar? (1-10): "))
    preco_min = input("Filtrar por preço mínimo (deixe em branco para ignorar): ")
    preco_max = input("Filtrar por preço máximo (deixe em branco para ignorar): ")
    modelo = input("Filtrar por modelo específico (deixe em branco para ignorar): ")

    # Converter preços para números
    preco_min = int(preco_min) if preco_min else None
    preco_max = int(preco_max) if preco_max else None

    driver = setup_driver()

    try:
        resultados = buscar_placas(driver, termo_busca, paginas)
        if resultados:
            print("Aplicando filtros...")
            df_resultados = filtrar_resultados(resultados, preco_min, preco_max, modelo)

            print("Ordenando resultados por preço...")
            df_resultados = df_resultados.sort_values(by="Preço (R$)", ascending=True)

            print("Coletando detalhes adicionais (pode levar alguns minutos)...")
            resultados_completos = coletar_detalhes_multithread(resultados)
            df_resultados_completos = pd.DataFrame(resultados_completos)

            # Exibir resumo
            print("Resumo dos melhores preços:")
            print(df_resultados.head())

            # Exportar para Excel
            exportar_para_excel(df_resultados_completos)
        else:
            print("Nenhum resultado encontrado.")
    finally:
        driver.quit()
